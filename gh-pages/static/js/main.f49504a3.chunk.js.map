{"version":3,"sources":["model/Thrall.ts","components/ThrallListThrall.tsx","components/ThrallList.tsx","util/conversions.ts","components/ThrallMap.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ThrallType","ThrallListThrall","props","nameClasses","selected","className","onClick","onSelect","thrall","name","type","ThrallList","thralls","sort","a","b","localeCompare","map","value","id","selectedThrall","onSelectThrall","ceCoordinateToLatLng","x","y","lat","lng","southWest","LatLng","northEast","mapBounds","LatLngBounds","MapEvents","useMapEvents","click","event","console","log","latlng","zoom","target","_zoom","drag","panInsideBounds","animate","locationfound","location","makeThrall","locations","data","TASKMASTER","CARPENTER","ARMORER","GROOMER","ALCHEMIST","makeMarkerForLocations","Circle","radius","center","Popup","makeMarkerForLocation","ThrallMap","useState","undefined","setSelectedThrall","MapContainer","style","height","width","minZoom","maxZoom","zoomSnap","zoomDelta","crs","CRS","Simple","maxBounds","zoomControl","ImageOverlay","url","bounds","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0KASYA,E,iHCDCC,EAAmB,SAACC,GAC7B,IAAMC,EAAW,6BAAyBD,EAAME,UAAY,mBAE5D,OAAO,sBAAKC,UAAWF,EAAhB,UACH,qBAAKE,UAAU,cAAcC,QAAS,kBAAMJ,EAAMK,SAASL,EAAMM,SAAjE,SAA2EN,EAAMM,OAAOC,OACxF,qBAAKJ,UAAU,cAAf,SACKH,EAAMM,OAAOE,WCHbC,EAAa,SAACT,GACvB,OAAO,8BACFA,EAAMU,QACFC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEL,KAAKO,cAAcD,EAAEN,SACtCQ,KAAI,SAAAC,GAAK,aAAI,cAAC,EAAD,CACkBd,SAAUc,EAAMC,MAAN,UAAajB,EAAMkB,sBAAnB,aAAa,EAAsBD,IAC7CZ,SAAUL,EAAMmB,eAChBb,OAAQU,GAHHA,EAAMC,UCZhD,SAASG,EAAqBC,EAAWC,GAC5C,MAAO,CACHC,KAAM,EAAID,EACVE,IAAKH,I,SHGDvB,K,sBAAAA,E,wBAAAA,E,kBAAAA,E,sBAAAA,E,wBAAAA,E,kBAAAA,E,qBAAAA,M,KIkBZ,IAAM2B,EAAoB,IAAIC,UAAQ,QAAe,QAE/CC,EAAoB,IAAID,SAAO,OAAc,QAC7CE,EAAoC,IAAIC,eAC1CJ,EACAE,GAGJ,SAASG,IACL,IAAMf,EAAMgB,YAAa,CACrBC,MAAO,SAACC,GACJC,QAAQC,IAAIF,EAAMG,SAEtBC,KAAM,SAAAJ,GAEFC,QAAQC,IAAIF,EAAMK,OAAOC,QAE7BC,KAAM,WACFzB,EAAI0B,gBAAgBb,EAAW,CAACc,SAAS,KAE7CC,cAAe,SAACC,GACZV,QAAQC,IAAI,kBAAmBS,MAGvC,OAAO,KAGX,SAASC,EAAWtC,EAAcC,GAA4D,IAA1CsC,EAAyC,uDAAZ,GAC7E,MAAO,CACHvC,OACAU,GAAIV,EACJC,OACAsC,aAIR,IAAMC,EAAiB,CACnBF,EAAW,iBAAkB/C,EAAWkD,YACxCH,EAAW,QAAS/C,EAAWmD,WAC/BJ,EAAW,UAAW/C,EAAWoD,SACjCL,EAAW,2BAA4B/C,EAAWkD,YAClDH,EAAW,mBAAoB/C,EAAWkD,YAC1CH,EAAW,yBAA0B/C,EAAWkD,YAChDH,EAAW,oBAAqB/C,EAAWkD,YAC3CH,EAAW,sBAAuB/C,EAAWqD,SAE7CN,EAAW,oBAAqB/C,EAAWkD,WAAY,CAAC5B,EAAsB,YAAa,UAC3FyB,EAAW,qBAAsB/C,EAAWoD,QAAS,CAAC9B,EAAsB,YAAa,UACzFyB,EAAW,WAAY/C,EAAWoD,SAClCL,EAAW,uBAAwB/C,EAAWsD,WAC9CP,EAAW,QAAS/C,EAAWkD,YAC/BH,EAAW,yBAA0B/C,EAAWkD,YAChDH,EAAW,sBAAuB/C,EAAWkD,YAC7CH,EAAW,qBAAsB/C,EAAWoD,UAchD,SAASG,EAAuB/C,GAC5B,cAAOA,QAAP,IAAOA,OAAP,EAAOA,EAAQwC,UAAU/B,KAAI,SAAA6B,GAAQ,OAXzC,SAA+BtC,EAAgBsC,GAC3C,OAAO,cAACU,EAAA,EAAD,CACQC,OAAQ,IACRC,OAAQ,CAACjC,IAAKqB,EAASrB,IAAKC,IAAKoB,EAASpB,KAFlD,SAGH,cAACiC,EAAA,EAAD,UACKnD,EAAOC,QAJIqC,EAASrB,IAAM,IAAMqB,EAASpB,KAUTkC,CAAsBpD,EAAQsC,MAIpE,SAASe,IAAa,IAAD,EAENC,mBAASb,GAApBrC,EAFiB,sBAGoBkD,wBAASC,GAH7B,mBAGjB3C,EAHiB,KAGD4C,EAHC,KAKxB,OAAO,sBAAK3D,UAAU,qBAAf,UACH,eAAC4D,EAAA,EAAD,CAAcP,OAAQ,CAAC,EAAG,GACZQ,MAAO,CAACC,OAAQ,QAASC,MAAO,uBAChCC,SAAU,IACVC,SAAU,EACVC,SAAU,GACVC,UAAW,GACXC,IAAKC,MAAIC,OACTC,UAAW9C,EACX+C,aAAa,EACbtC,MAAO,IATrB,UAUI,cAACuC,EAAA,EAAD,CAAcC,IAAI,sCAAsCC,OAAQlD,IAChE,cAACE,EAAD,IACCuB,EAAuBnC,MAE5B,qBAAKf,UAAU,gBAAf,SACI,cAAC,EAAD,CAAYO,QAASA,EAASQ,eAAgBA,EAAgBC,eAAgB2C,SC3G3EiB,MARf,WACE,OACE,8BACE,cAACpB,EAAD,OCMSqB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f49504a3.chunk.js","sourcesContent":["import {LatLngLiteral} from \"leaflet\";\r\n\r\nexport interface Thrall {\r\n    id: string;\r\n    name: string;\r\n    type: ThrallType;\r\n    locations: LatLngLiteral[];\r\n}\r\n\r\nexport enum ThrallType {\r\n    ALCHEMIST = 'ALCHEMIST',\r\n    BLACKSMITH = 'BLACKSMITH',\r\n    ARMORER = 'ARMORER',\r\n    CARPENTER = 'CARPENTER',\r\n    TASKMASTER = 'TASKMASTER',\r\n    GROOMER = 'GROOMER',\r\n    SMELTER = 'SMELTER  ',\r\n}\r\n","import {Thrall} from \"../model/Thrall\";\r\n\r\nexport interface ThrallListThrallProps {\r\n    selected: boolean;\r\n    thrall: Thrall;\r\n    onSelect(thrall: Thrall): void;\r\n}\r\n\r\nexport const ThrallListThrall = (props: ThrallListThrallProps) => {\r\n    const nameClasses = `thrall-wars-thrall ${props.selected && 'thrall-selected'}`\r\n\r\n    return <div className={nameClasses}>\r\n        <div className=\"thrall-name\" onClick={() => props.onSelect(props.thrall)}>{props.thrall.name}</div>\r\n        <div className=\"thrall-type\">\r\n            {props.thrall.type}\r\n        </div>\r\n    </div>\r\n}\r\n","import {Thrall} from \"../model/Thrall\";\r\nimport {ThrallListThrall} from \"./ThrallListThrall\";\r\nimport React from \"react\";\r\n\r\nexport interface ThrallListProps {\r\n    selectedThrall?: Thrall;\r\n    thralls: Thrall[];\r\n\r\n    onSelectThrall(thrall: Thrall): void;\r\n}\r\n\r\nexport const ThrallList = (props: ThrallListProps) => {\r\n    return <div>\r\n        {props.thralls\r\n            .sort((a, b) => a.name.localeCompare(b.name))\r\n            .map(value => <ThrallListThrall key={value.id}\r\n                                            selected={value.id === props.selectedThrall?.id}\r\n                                            onSelect={props.onSelectThrall}\r\n                                            thrall={value}/>)}\r\n    </div>\r\n}\r\n","import {LatLngLiteral} from \"leaflet\";\r\n\r\n// Coords from // TeleportPlayer x y z\r\nexport function ceCoordinateToLatLng(x: number, y: number): LatLngLiteral {\r\n    return {\r\n        lat: -1 * y,\r\n        lng: x\r\n    }\r\n}\r\n","import {Circle, ImageOverlay, MapContainer, Popup, useMapEvents} from \"react-leaflet\";\r\nimport {CRS, LatLng, LatLngBounds, LatLngBoundsExpression, LatLngLiteral} from \"leaflet\";\r\nimport {ThrallList} from \"./ThrallList\";\r\nimport {Thrall, ThrallType} from \"../model/Thrall\";\r\nimport React, {useState} from \"react\";\r\nimport {ceCoordinateToLatLng} from \"../util/conversions\";\r\n\r\n// Coordiantes are [y,x]\r\n// Teleport player locates them as [x, y, z]\r\n\r\n// Left Side: TeleportPlayer -342934.09375 349993.78125 -17373.080078\r\n// Right side: TeleportPlayer 474806.09375 329969.6875 -37927.75\r\n// Bottom: TeleportPlayer 248194.171875 368872.59375 -10562.074219\r\n// Top: TeleportPlayer 17492.65625 -445384.28125 15668.111328\r\n\r\n// WEST SOUTH EAST NORTH\r\n// -342934 368872 474806 -445384\r\n// Latitude: bottom to top\r\n// Longitude: left to right\r\n// Left/West: -342934.00000\r\n// Right: 474806.00000\r\n// Top: -445384.00000\r\n// Bottom: 368872.00000\r\n// const southWest: LatLng = new LatLng(368872.00000, -342934.00000);\r\n\r\n// NOTE: Latitude needs the sign inverted.\r\n// southwest teleport: TeleportPlayer -342673.59375 369398.8125 -15273.344727\r\nconst southWest: LatLng = new LatLng(-369398.00000, -342934.00000);\r\n// TeleportPlayer 475140.4375 -444603.34375 27547.671875\r\nconst northEast: LatLng = new LatLng(444603.00000, 475140.00000);\r\nconst mapBounds: LatLngBoundsExpression = new LatLngBounds(\r\n    southWest,\r\n    northEast\r\n);\r\n\r\nfunction MapEvents() {\r\n    const map = useMapEvents({\r\n        click: (event) => {\r\n            console.log(event.latlng);\r\n        },\r\n        zoom: event => {\r\n\r\n            console.log(event.target._zoom);\r\n        },\r\n        drag: () => {\r\n            map.panInsideBounds(mapBounds, {animate: false});\r\n        },\r\n        locationfound: (location) => {\r\n            console.log('location found:', location)\r\n        },\r\n    })\r\n    return null\r\n}\r\n\r\nfunction makeThrall(name: string, type: ThrallType, locations: LatLngLiteral[] = []): Thrall {\r\n    return {\r\n        name,\r\n        id: name,\r\n        type,\r\n        locations\r\n    }\r\n}\r\n\r\nconst data: Thrall[] = [\r\n    makeThrall('Viek the Spire', ThrallType.TASKMASTER),\r\n    makeThrall('Hekla', ThrallType.CARPENTER),\r\n    makeThrall('Thorunn', ThrallType.ARMORER),\r\n    makeThrall('Lady Elizabeth Killigrew', ThrallType.TASKMASTER),\r\n    makeThrall('Julia the Chaste', ThrallType.TASKMASTER),\r\n    makeThrall('Queen Julia the Chaste', ThrallType.TASKMASTER),\r\n    makeThrall('Fass the Torturer', ThrallType.TASKMASTER),\r\n    makeThrall('Landora the Groomer', ThrallType.GROOMER),\r\n    // TeleportPlayer 131140.3125 202741.0 -19914.181641\r\n    makeThrall('Beast the Breaker', ThrallType.TASKMASTER, [ceCoordinateToLatLng( 131140.3125, 202741.0)]),\r\n    makeThrall('Floki the Tinkerer', ThrallType.ARMORER, [ceCoordinateToLatLng( 131140.3125, 202741.0)]),\r\n    makeThrall('Berglind', ThrallType.ARMORER),\r\n    makeThrall('Serpa the Gem Cutter', ThrallType.ALCHEMIST),\r\n    makeThrall('Katla', ThrallType.TASKMASTER),\r\n    makeThrall('Gabriela the Alchemist', ThrallType.TASKMASTER),\r\n    makeThrall('Ivar the Crafty One', ThrallType.TASKMASTER),\r\n    makeThrall('Akasuki the Binder', ThrallType.ARMORER),\r\n]\r\n\r\n\r\nfunction makeMarkerForLocation(thrall: Thrall, location: LatLngLiteral) {\r\n    return <Circle key={location.lat + '_' + location.lng}\r\n                   radius={1000}\r\n                   center={{lat: location.lat, lng: location.lng}}>\r\n        <Popup>\r\n            {thrall.name}\r\n        </Popup>\r\n    </Circle>\r\n}\r\n\r\nfunction makeMarkerForLocations(thrall: Thrall) {\r\n    return thrall?.locations.map(location => makeMarkerForLocation(thrall, location));\r\n}\r\n\r\n\r\nexport function ThrallMap() {\r\n\r\n    const [thralls] = useState(data);\r\n    const [selectedThrall, setSelectedThrall] = useState(undefined as unknown as Thrall);\r\n\r\n    return <div className=\"thrall-map-wrapper\">\r\n        <MapContainer center={[0, 0]}\r\n                      style={{height: '100vh', width: 'calc(100vw - 400px)'}}\r\n                      minZoom={-8.7}\r\n                      maxZoom={-4}\r\n                      zoomSnap={0.1}\r\n                      zoomDelta={0.1}\r\n                      crs={CRS.Simple}\r\n                      maxBounds={mapBounds}\r\n                      zoomControl={true}\r\n                      zoom={-8.7}>\r\n            <ImageOverlay url=\"/fc_assets/full_map_low_quality.jpg\" bounds={mapBounds}/>\r\n            <MapEvents/>\r\n            {makeMarkerForLocations(selectedThrall)}\r\n        </MapContainer>\r\n        <div className=\"sidebar-right\">\r\n            <ThrallList thralls={thralls} selectedThrall={selectedThrall} onSelectThrall={setSelectedThrall}/>\r\n        </div>\r\n    </div>\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport {ThrallMap} from \"./components/ThrallMap\";\n\n\nfunction App() {\n  return (\n    <div >\n      <ThrallMap/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'leaflet/dist/leaflet.css'\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}