{"version":3,"sources":["model/Thrall.ts","components/thrall-header/ThrallHeader.tsx","components/ThrallListItem.tsx","components/thrall-details/ThrallDetails.tsx","components/thrall-list/ThrallList.tsx","components/ThrallMap.tsx","util/conversions.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ThrallType","ThrallHeader","props","className","onClick","onSelect","thrall","name","type","style","marginLeft","marginRight","fontSize","icon","ThrallListItem","ThrallDetails","slideAnimationClass","focused","locations","ALCHEMIST","id","onDeSelect","locationDescription","map","value","x","y","ThrallList","additionalListClass","selectedThrallFocused","Fragment","selectedThrall","onDeselectThrall","thralls","sort","a","b","localeCompare","onSelectThrall","southWest","LatLng","northEast","mapBounds","LatLngBounds","MapEvents","useMapEvents","click","event","console","log","latlng","zoom","target","_zoom","drag","panInsideBounds","animate","locationfound","location","makeMarkerForLocations","Circle","radius","center","lat","lng","Popup","makeMarkerForLocation","ceCoordinate","ceCoordinateToLatLng","ThrallMap","useState","undefined","setSelectedThrall","thrallFocused","setThrallFocused","MapContainer","height","width","minZoom","maxZoom","zoomSnap","zoomDelta","crs","CRS","Simple","maxBounds","zoomControl","ImageOverlay","url","process","bounds","data","App","state","fetch","window","href","then","json","setState","this","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a5b6aed.chunk.js","sourcesContent":["import {CeCoordinate} from \"./CeCoordinate\";\r\n\r\nexport interface Thrall {\r\n    id: string;\r\n    name: string;\r\n    type: ThrallType;\r\n    locationDescription?: string;\r\n    locations: CeCoordinate[];\r\n}\r\n\r\nexport enum ThrallType {\r\n    ALCHEMIST = 'ALCHEMIST',\r\n    BLACKSMITH = 'BLACKSMITH',\r\n    ARMORER = 'ARMORER',\r\n    CARPENTER = 'CARPENTER',\r\n    TASKMASTER = 'TASKMASTER',\r\n    GROOMER = 'GROOMER',\r\n    SMELTER = 'SMELTER  ',\r\n}\r\n","import React from \"react\";\r\nimport {Thrall} from \"../../model/Thrall\";\r\nimport './ThrallHeader.css'\r\n\r\n\r\nexport interface ThrallHeaderProps {\r\n    thrall: Thrall;\r\n    icon: 'chevron_right' | 'chevron_left';\r\n    onSelect(thrall: Thrall): void;\r\n}\r\n\r\nexport const ThrallHeader = (props: ThrallHeaderProps) => {\r\n    return <div className=\"thrall-header\" onClick={() => props.onSelect(props.thrall)}>\r\n        <div>\r\n            <div className=\"thrall-header-name\">{props.thrall.name}</div>\r\n            <div className=\"thrall-header-type\">\r\n                {props.thrall.type}\r\n            </div>\r\n        </div>\r\n        <div style={{marginLeft: 'auto', marginRight: '16px'}}>\r\n            <span className=\"material-icons\" style={{fontSize: '20pt'}}>{props.icon}</span>\r\n        </div>\r\n    </div>\r\n}\r\n","import {Thrall} from \"../model/Thrall\";\r\nimport React from \"react\";\r\nimport {ThrallHeader} from \"./thrall-header/ThrallHeader\";\r\n\r\nexport interface ThrallListThrallProps {\r\n    thrall: Thrall;\r\n\r\n    onSelect(thrall: Thrall): void;\r\n}\r\n\r\nexport const ThrallListItem = (props: ThrallListThrallProps) => {\r\n    return <ThrallHeader onSelect={props.onSelect} thrall={props.thrall} icon={\"chevron_right\"}/>\r\n}\r\n","import {Thrall, ThrallType} from \"../../model/Thrall\";\r\nimport React from \"react\";\r\nimport './ThrallDetails.css';\r\nimport {ThrallHeader} from \"../thrall-header/ThrallHeader\";\r\n\r\ninterface ThrallDetailsProps {\r\n    focused: boolean;\r\n    thrall?: Thrall;\r\n    onDeSelect(): void;\r\n}\r\n\r\nexport const ThrallDetails = (props: ThrallDetailsProps) => {\r\n    const slideAnimationClass = props.focused ? 'thrall-details-sliding-in' : 'thrall-details-sliding-out'\r\n    return <div className={\"thrall-details-container \" + slideAnimationClass}>\r\n        <div className=\"thrall-details\">\r\n            <ThrallHeader thrall={props.thrall || {locations: [],name: '',type: ThrallType.ALCHEMIST, id: 'ada'}} icon={\"chevron_left\"} onSelect={props.onDeSelect}/>\r\n            <div className=\"thrall-location-description\">\r\n                {props.thrall?.locationDescription}\r\n            </div>\r\n            <div className=\"thrall-location-list-container\">\r\n                <div className=\"thrall-location-list-header\">\r\n                    Locations\r\n                </div>\r\n                <div className=\"thrall-location-list-subheader\">\r\n                    Click a location to jump to it\r\n                </div>\r\n                {props.thrall?.locations.map(value => <div>{value.x + \" \" + value.y}</div>)}\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n","import {Thrall} from \"../../model/Thrall\";\r\nimport {ThrallListItem} from \"../ThrallListItem\";\r\nimport React from \"react\";\r\nimport {ThrallDetails} from \"../thrall-details/ThrallDetails\";\r\nimport './ThrallList.css';\r\n\r\nexport interface ThrallListProps {\r\n    selectedThrall?: Thrall;\r\n    // For animation\r\n    selectedThrallFocused: boolean;\r\n    thralls: Thrall[];\r\n    onSelectThrall(thrall: Thrall): void;\r\n    onDeselectThrall(): void;\r\n}\r\n\r\nexport const ThrallList = (props: ThrallListProps) => {\r\n    const additionalListClass = props.selectedThrallFocused ? 'thrall-list-sliding-out' : 'thrall-list-sliding-in';\r\n    return <React.Fragment>\r\n        <ThrallDetails focused={props.selectedThrallFocused} thrall={props.selectedThrall} onDeSelect={props.onDeselectThrall}/>\r\n        <div className={'thrall-list ' + additionalListClass}>\r\n            {props.thralls\r\n                .sort((a, b) => a.name.localeCompare(b.name))\r\n                .map(value => <ThrallListItem key={value.id}\r\n                                              onSelect={props.onSelectThrall}\r\n                                              thrall={value}/>)}\r\n        </div>\r\n    </React.Fragment>\r\n}\r\n","import {Circle, ImageOverlay, MapContainer, Popup, useMapEvents} from \"react-leaflet\";\r\nimport {CRS, LatLng, LatLngBounds, LatLngBoundsExpression, LatLngLiteral} from \"leaflet\";\r\nimport {ThrallList} from \"./thrall-list/ThrallList\";\r\nimport {Thrall} from \"../model/Thrall\";\r\nimport React, {useState} from \"react\";\r\nimport {ceCoordinateToLatLng} from \"../util/conversions\";\r\n\r\n// Coordiantes are [y,x]\r\n// Teleport player locates them as [x, y, z]\r\n\r\n// Left Side: TeleportPlayer -342934.09375 349993.78125 -17373.080078\r\n// Right side: TeleportPlayer 474806.09375 329969.6875 -37927.75\r\n// Bottom: TeleportPlayer 248194.171875 368872.59375 -10562.074219\r\n// Top: TeleportPlayer 17492.65625 -445384.28125 15668.111328\r\n\r\n// WEST SOUTH EAST NORTH\r\n// -342934 368872 474806 -445384\r\n// Latitude: bottom to top\r\n// Longitude: left to right\r\n// Left/West: -342934.00000\r\n// Right: 474806.00000\r\n// Top: -445384.00000\r\n// Bottom: 368872.00000\r\n// const southWest: LatLng = new LatLng(368872.00000, -342934.00000);\r\n\r\n// NOTE: Latitude needs the sign inverted.\r\n// southwest teleport: TeleportPlayer -342673.59375 369398.8125 -15273.344727\r\nconst southWest: LatLng = new LatLng(-369398.00000, -342934.00000);\r\n// TeleportPlayer 475140.4375 -444603.34375 27547.671875\r\nconst northEast: LatLng = new LatLng(444603.00000, 475140.00000);\r\nconst mapBounds: LatLngBoundsExpression = new LatLngBounds(\r\n    southWest,\r\n    northEast\r\n);\r\n\r\nfunction MapEvents() {\r\n    const map = useMapEvents({\r\n        click: (event) => {\r\n            console.log(event.latlng);\r\n        },\r\n        zoom: event => {\r\n\r\n            console.log(event.target._zoom);\r\n        },\r\n        drag: () => {\r\n            map.panInsideBounds(mapBounds, {animate: false});\r\n        },\r\n        locationfound: (location) => {\r\n            console.log('location found:', location)\r\n        },\r\n    })\r\n    return null\r\n}\r\n\r\nfunction makeMarkerForLocation(thrall: Thrall, location: LatLngLiteral) {\r\n    return <Circle key={location.lat + '_' + location.lng}\r\n                   radius={1000}\r\n                   center={{lat: location.lat, lng: location.lng}}>\r\n        <Popup>\r\n            {thrall.name}\r\n        </Popup>\r\n    </Circle>\r\n}\r\n\r\nfunction makeMarkerForLocations(thrall?: Thrall) {\r\n    return thrall?.locations.map(location => makeMarkerForLocation(thrall, ceCoordinateToLatLng(location)));\r\n}\r\n\r\ninterface ThrallMapProps {\r\n    data: Thrall[];\r\n}\r\n\r\nexport function ThrallMap(props: ThrallMapProps) {\r\n    // console.log(JSON.stringify(data));\r\n    //\r\n    // const [thralls] = useState(data);\r\n    const [selectedThrall, setSelectedThrall] = useState(undefined as unknown as Thrall | undefined);\r\n    // Use a separate focus flag to control whether the detail display or the list display is used\r\n    // This avoids having an undefined name while the element with the details is sliding out\r\n    const [thrallFocused, setThrallFocused] = useState(false);\r\n\r\n    function handleSelectThrall(thrall: Thrall) {\r\n        setSelectedThrall(thrall)\r\n        setThrallFocused(true)\r\n    }\r\n\r\n    function handleDeselectThrall() {\r\n        // While animating, we still want the thrall details visible until\r\n        // it has slide out.\r\n        setThrallFocused(false)\r\n    }\r\n\r\n    return <div className=\"thrall-map-wrapper\">\r\n        <MapContainer center={[0, 0]}\r\n                      style={{height: '100vh', width: 'calc(100vw - var(--sidebar-width))'}}\r\n                      minZoom={-8.7}\r\n                      maxZoom={-4}\r\n                      zoomSnap={0.1}\r\n                      zoomDelta={0.1}\r\n                      crs={CRS.Simple}\r\n                      maxBounds={mapBounds}\r\n                      zoomControl={true}\r\n                      zoom={-8.7}>\r\n            <ImageOverlay url={process.env.PUBLIC_URL + \"/fc_assets/full_map_low_quality.jpg\"} bounds={mapBounds}/>\r\n            <MapEvents/>\r\n            {makeMarkerForLocations(selectedThrall)}\r\n        </MapContainer>\r\n        <div className=\"sidebar-right\">\r\n            <ThrallList thralls={props.data}\r\n                        selectedThrallFocused={thrallFocused}\r\n                        selectedThrall={selectedThrall}\r\n                        onDeselectThrall={handleDeselectThrall}\r\n                        onSelectThrall={handleSelectThrall}/>\r\n        </div>\r\n    </div>\r\n}\r\n","import {LatLngLiteral} from \"leaflet\";\r\nimport {CeCoordinate} from \"../model/CeCoordinate\";\r\n\r\nexport function ceCoordinateToLatLng(ceCoordinate: CeCoordinate): LatLngLiteral {\r\n    return {\r\n        // Because coordinates are in pixel space, the y-axis goes from negative (bot) to positive (top),\r\n        // where as in CE it goes from positive(bot) to negative(top)\r\n        // So we need to invert it.\r\n        lat: -1 * ceCoordinate.y,\r\n        lng: ceCoordinate.x\r\n    }\r\n}\r\n\r\nexport function ceCoordinate(x: number, y: number, z: number): CeCoordinate {\r\n    return {x, y, z}\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport {ThrallMap} from \"./components/ThrallMap\";\nimport {Thrall} from \"./model/Thrall\";\n\ninterface AppState {\n    data: Thrall[]\n}\n\nexport class App extends React.Component<any, AppState> {\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            data: []\n        }\n    }\n\n    componentDidMount() {\n        fetch(window.location.href + '/data.json')\n            .then(value => value.json())\n            .then(data => this.setState({data}))\n    }\n\n    render() {\n        return (\n            <div>\n                <ThrallMap data={this.state.data}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'leaflet/dist/leaflet.css'\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}