{"version":3,"sources":["model/Thrall.ts","components/thrall-header/ThrallHeader.tsx","components/ThrallListItem.tsx","components/thrall-details/thrall-details-locations/ThrallDetailsLocations.tsx","components/thrall-details/ThrallDetails.tsx","components/thrall-list/ThrallList.tsx","util/conversions.ts","components/ThrallMap.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ThrallType","ThrallHeader","props","className","onClick","onSelect","thrall","name","type","style","marginLeft","marginRight","fontSize","icon","ThrallListItem","ThrallDetailsLocation","onSelectLocation","location","alt","src","process","spawnSpot","x","y","z","ThrallDetailsLocations","locations","map","value","index","ThrallDetails","slideAnimationClass","focused","ALCHEMIST","id","onDeSelect","locationDescription","ThrallList","additionalListClass","selectedThrallFocused","Fragment","selectedThrall","onDeselectThrall","thralls","sort","a","b","localeCompare","onSelectThrall","ceCoordinateToLatLng","ceCoordinate","lat","lng","southWest","LatLng","northEast","mapBounds","LatLngBounds","MapEvents","useMapEvents","click","event","console","log","latlng","zoom","target","_zoom","drag","panInsideBounds","animate","locationfound","locationIcon","iconUrl","iconSize","tooltipAnchor","MarkerForLocations","useMap","getZoom","Marker","position","Tooltip","direction","makeMarkerForLocation","SetViewOnClick","center","getCenter","flyTo","ThrallMap","useState","undefined","setSelectedThrall","thrallFocused","setThrallFocused","zoomCenter","setZoomCenter","MapContainer","height","width","minZoom","maxZoom","zoomSnap","zoomDelta","crs","CRS","Simple","maxBounds","zoomControl","ImageOverlay","url","bounds","data","length","latLngs","Polyline","getBounds","Polygon","findCenter","App","state","fetch","window","href","then","json","setState","this","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ff186081.chunk.js","sourcesContent":["import {ThrallLocation} from \"./ThrallLocation\";\r\n\r\nexport interface Thrall {\r\n    id: string;\r\n    name: string;\r\n    type: ThrallType;\r\n    locationDescription?: string;\r\n    locations: ThrallLocation[];\r\n}\r\n\r\nexport enum ThrallType {\r\n    ALCHEMIST = 'ALCHEMIST',\r\n    BLACKSMITH = 'BLACKSMITH',\r\n    ARMORER = 'ARMORER',\r\n    CARPENTER = 'CARPENTER',\r\n    TASKMASTER = 'TASKMASTER',\r\n    GROOMER = 'GROOMER',\r\n    SMELTER = 'SMELTER  ',\r\n}\r\n","import React from \"react\";\r\nimport {Thrall} from \"../../model/Thrall\";\r\nimport './ThrallHeader.css'\r\n\r\n\r\nexport interface ThrallHeaderProps {\r\n    thrall: Thrall;\r\n    icon: 'chevron_right' | 'chevron_left';\r\n    onSelect(thrall: Thrall): void;\r\n}\r\n\r\nexport const ThrallHeader = (props: ThrallHeaderProps) => {\r\n    return <div className=\"thrall-header\" onClick={() => props.onSelect(props.thrall)}>\r\n        <div>\r\n            <div className=\"thrall-header-name\">{props.thrall.name}</div>\r\n            <div className=\"thrall-header-type\">\r\n                {props.thrall.type}\r\n            </div>\r\n        </div>\r\n        <div style={{marginLeft: 'auto', marginRight: '16px'}}>\r\n            <span className=\"material-icons\" style={{fontSize: '20pt'}}>{props.icon}</span>\r\n        </div>\r\n    </div>\r\n}\r\n","import {Thrall} from \"../model/Thrall\";\r\nimport React from \"react\";\r\nimport {ThrallHeader} from \"./thrall-header/ThrallHeader\";\r\n\r\nexport interface ThrallListThrallProps {\r\n    thrall: Thrall;\r\n\r\n    onSelect(thrall: Thrall): void;\r\n}\r\n\r\nexport const ThrallListItem = (props: ThrallListThrallProps) => {\r\n    return <ThrallHeader onSelect={props.onSelect} thrall={props.thrall} icon={\"chevron_right\"}/>\r\n}\r\n","import {Thrall} from \"../../../model/Thrall\";\r\nimport {ThrallLocation} from \"../../../model/ThrallLocation\";\r\nimport './ThrallDetailsLocations.css';\r\nimport React from \"react\";\r\n\r\ninterface ThrallDetailsLocationProps {\r\n    location: ThrallLocation;\r\n    onSelectLocation(location: ThrallLocation): void;\r\n}\r\n\r\nexport interface ThrallDetailsLocationsProps {\r\n    thrall?: Thrall;\r\n    onSelectLocation(location: ThrallLocation): void;\r\n}\r\n\r\nconst ThrallDetailsLocation = (props: ThrallDetailsLocationProps) => <div\r\n    onClick={() => props.onSelectLocation(props.location)}\r\n    className=\"thrall-detail-single-location\">\r\n    <div className=\"display-in-row display-in-center \">\r\n        <div style={{marginRight: '16px'}}>\r\n            <img alt=\"icon camp\" src={process.env.PUBLIC_URL + \"/fc_assets/icon_camp.png\"}/>\r\n        </div>\r\n        <div style={{marginRight: 'auto'}}>\r\n            <div style={{fontSize: '14pt'}}>{props.location.location}</div>\r\n            <div style={{fontSize: '11pt'}}>Spawns at the {props.location.spawnSpot} spot.</div>\r\n            <div style={{fontSize: '9pt'}}>Coordiantes: {props.location.x} / {props.location.y} / {props.location.z}</div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\nexport const ThrallDetailsLocations = (props: ThrallDetailsLocationsProps) => {\r\n    return  <div className=\"thrall-location-list-container\">\r\n        <div>\r\n            <div className=\"thrall-location-list-header\">\r\n                Locations\r\n            </div>\r\n            <div className=\"thrall-location-list-subheader\">\r\n                Click a location to jump to it\r\n            </div>\r\n            <div className=\"thrall-details-locations\">\r\n                {props.thrall?.locations.map((value, index) => <ThrallDetailsLocation\r\n                    onSelectLocation={props.onSelectLocation}\r\n                    key={index}\r\n                    location={value}/> )}\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n","import {Thrall, ThrallType} from \"../../model/Thrall\";\r\nimport React from \"react\";\r\nimport './ThrallDetails.css';\r\nimport {ThrallHeader} from \"../thrall-header/ThrallHeader\";\r\nimport {ThrallDetailsLocations} from \"./thrall-details-locations/ThrallDetailsLocations\";\r\nimport {ThrallLocation} from \"../../model/ThrallLocation\";\r\n\r\ninterface ThrallDetailsProps {\r\n    focused: boolean;\r\n    thrall?: Thrall;\r\n    onDeSelect(): void;\r\n    onSelectLocation(location: ThrallLocation): void;\r\n}\r\n\r\nexport const ThrallDetails = (props: ThrallDetailsProps) => {\r\n    const slideAnimationClass = props.focused ? 'thrall-details-sliding-in' : 'thrall-details-sliding-out'\r\n    return <div className={\"thrall-details-container \" + slideAnimationClass}>\r\n        <div className=\"thrall-details\">\r\n            <ThrallHeader thrall={props.thrall || {locations: [],name: '',type: ThrallType.ALCHEMIST, id: 'ada'}} icon={\"chevron_left\"} onSelect={props.onDeSelect}/>\r\n            <div className=\"thrall-location-description\">\r\n                {props.thrall?.locationDescription}\r\n            </div>\r\n            <ThrallDetailsLocations thrall={props.thrall} onSelectLocation={props.onSelectLocation}/>\r\n        </div>\r\n    </div>\r\n}\r\n","import {Thrall} from \"../../model/Thrall\";\r\nimport {ThrallListItem} from \"../ThrallListItem\";\r\nimport React from \"react\";\r\nimport {ThrallDetails} from \"../thrall-details/ThrallDetails\";\r\nimport './ThrallList.css';\r\nimport {ThrallLocation} from \"../../model/ThrallLocation\";\r\n\r\nexport interface ThrallListProps {\r\n    selectedThrall?: Thrall;\r\n    // For animation\r\n    selectedThrallFocused: boolean;\r\n    thralls: Thrall[];\r\n    onSelectThrall(thrall: Thrall): void;\r\n    onDeselectThrall(): void;\r\n\r\n    onSelectLocation(location: ThrallLocation): void;\r\n}\r\n\r\nexport const ThrallList = (props: ThrallListProps) => {\r\n    const additionalListClass = props.selectedThrallFocused ? 'thrall-list-sliding-out' : 'thrall-list-sliding-in';\r\n    return <React.Fragment>\r\n        <ThrallDetails focused={props.selectedThrallFocused}\r\n                       onSelectLocation={props.onSelectLocation}\r\n                       thrall={props.selectedThrall} onDeSelect={props.onDeselectThrall}/>\r\n        <div className={'thrall-list ' + additionalListClass}>\r\n            {props.thralls\r\n                .sort((a, b) => a.name.localeCompare(b.name))\r\n                .map(value => <ThrallListItem key={value.id}\r\n                                              onSelect={props.onSelectThrall}\r\n                                              thrall={value}/>)}\r\n        </div>\r\n    </React.Fragment>\r\n}\r\n","import {LatLng, LatLngLiteral, LineUtil, Polygon, Polyline} from \"leaflet\";\r\nimport {ThrallLocation} from \"../model/ThrallLocation\";\r\n\r\nexport function ceCoordinateToLatLng(ceCoordinate: ThrallLocation): LatLngLiteral {\r\n    return {\r\n        // Because coordinates are in pixel space, the y-axis goes from negative (bot) to positive (top),\r\n        // where as in CE it goes from positive(bot) to negative(top)\r\n        // So we need to invert it.\r\n        lat: -1 * ceCoordinate.y,\r\n        lng: ceCoordinate.x\r\n    }\r\n}\r\n\r\nconst lerp = (x: number, y: number, a: number) => x * (1 - a) + y * a;\r\nconst invlerp = (x: number, y: number, a: number) => clamp((a - x) / (y - x));\r\nconst clamp = (a: number, min = 0, max = 1) => Math.min(max, Math.max(min, a));\r\nconst range = (\r\n    x1: number,\r\n    y1: number,\r\n    x2: number,\r\n    y2: number,\r\n    a: number\r\n) => lerp(x2, y2, invlerp(x1, y1, a));\r\n\r\n/**\r\n * Turns a zoom level into a marker size.\r\n */\r\nexport function zoomToIconSize(zoom: number): number {\r\n    // Marker size at zoom -4 = 400\r\n    // Marker size at zoom -8.7 = 3000\r\n    //\r\n    const r = range(400, 3000, -4, -8.7, zoom);\r\n    console.log(zoom + \":\" + r);\r\n    return r;\r\n}\r\n\r\nexport function ceCoordinate(x: number, y: number, z: number): ThrallLocation {\r\n    return {x, y, z}\r\n}\r\n\r\nexport function findCenter(locations: ThrallLocation[]): LatLngLiteral| null {\r\n    if (locations.length <= 0) {\r\n        return null;\r\n    }\r\n    if (locations.length <= 1) {\r\n        return ceCoordinateToLatLng(locations[0])\r\n    }\r\n    if (locations.length <= 2) {\r\n        const latLngs = locations.map(value => ceCoordinateToLatLng(value));\r\n        return new Polyline(latLngs).getBounds().getCenter();\r\n    }\r\n    const latLngs = locations.map(value => ceCoordinateToLatLng(value));\r\n    const polygon = new Polygon(latLngs);\r\n    return polygon.getBounds().getCenter();\r\n}\r\n","import {ImageOverlay, MapContainer, Marker, Tooltip, useMap, useMapEvents} from \"react-leaflet\";\r\nimport {CRS, icon, LatLng, LatLngBounds, LatLngBoundsExpression, LatLngLiteral,} from \"leaflet\";\r\nimport {ThrallList} from \"./thrall-list/ThrallList\";\r\nimport {Thrall} from \"../model/Thrall\";\r\nimport React, {useState} from \"react\";\r\nimport {ceCoordinateToLatLng, findCenter} from \"../util/conversions\";\r\nimport {ThrallLocation} from \"../model/ThrallLocation\";\r\n\r\n// Coordiantes are [y,x]\r\n// Teleport player locates them as [x, y, z]\r\n\r\n// Left Side: TeleportPlayer -342934.09375 349993.78125 -17373.080078\r\n// Right side: TeleportPlayer 474806.09375 329969.6875 -37927.75\r\n// Bottom: TeleportPlayer 248194.171875 368872.59375 -10562.074219\r\n// Top: TeleportPlayer 17492.65625 -445384.28125 15668.111328\r\n\r\n// WEST SOUTH EAST NORTH\r\n// -342934 368872 474806 -445384\r\n// Latitude: bottom to top\r\n// Longitude: left to right\r\n// Left/West: -342934.00000\r\n// Right: 474806.00000\r\n// Top: -445384.00000\r\n// Bottom: 368872.00000\r\n// const southWest: LatLng = new LatLng(368872.00000, -342934.00000);\r\n\r\n// NOTE: Latitude needs the sign inverted.\r\n// southwest teleport: TeleportPlayer -342673.59375 369398.8125 -15273.344727\r\nconst southWest: LatLng = new LatLng(-369398.00000, -342934.00000);\r\n// TeleportPlayer 475140.4375 -444603.34375 27547.671875\r\nconst northEast: LatLng = new LatLng(444603.00000, 475140.00000);\r\nconst mapBounds: LatLngBoundsExpression = new LatLngBounds(\r\n    southWest,\r\n    northEast\r\n);\r\n\r\nfunction MapEvents() {\r\n    const map = useMapEvents({\r\n        click: (event) => {\r\n            console.log(event.latlng);\r\n        },\r\n        zoom: event => {\r\n            console.log(event.target._zoom);\r\n        },\r\n        drag: () => {\r\n            map.panInsideBounds(mapBounds, {animate: false});\r\n        },\r\n        locationfound: (location) => {\r\n            console.log('location found:', location)\r\n        },\r\n    })\r\n    return null\r\n}\r\n\r\nconst locationIcon = icon({\r\n    iconUrl: process.env.PUBLIC_URL + '/fc_assets/icon_camp.png',\r\n    iconSize: [24, 24],\r\n    tooltipAnchor: [0, 12],\r\n});\r\n\r\nfunction makeMarkerForLocation(thrall: Thrall, location: LatLngLiteral, zoom: number) {\r\n    return <Marker key={location.lat + '_' + location.lng}\r\n                   icon={locationIcon}\r\n                   position={location}>\r\n        <Tooltip direction=\"bottom\">{thrall.name}</Tooltip>\r\n    </Marker>\r\n}\r\n\r\n\r\nfunction MarkerForLocations(props: {thrall?: Thrall, focused: boolean}): any {\r\n    let zoom = useMap().getZoom();\r\n    if (!props.focused) {\r\n        return [];\r\n    }\r\n    const thrall = props.thrall;\r\n    if (!thrall) {\r\n        return <React.Fragment/>;\r\n    }\r\n    return thrall.locations.map(location => makeMarkerForLocation(thrall, ceCoordinateToLatLng(location), zoom));\r\n}\r\n\r\ninterface ThrallMapProps {\r\n    data: Thrall[];\r\n}\r\n\r\nfunction SetViewOnClick(props: { location?: ZoomCenter }) {\r\n    const map = useMap();\r\n    if (props.location) {\r\n        const zoom = props.location.zoom ? props.location.zoom : map.getZoom();\r\n        const center = props.location.center ? props.location.center : map.getCenter()\r\n        map.flyTo(center, zoom);\r\n    }\r\n    return null;\r\n}\r\n\r\ninterface ZoomCenter {\r\n    zoom?: number;\r\n    center?: LatLngLiteral;\r\n}\r\n\r\nexport function ThrallMap(props: ThrallMapProps) {\r\n    const [selectedThrall, setSelectedThrall] = useState(undefined as unknown as Thrall | undefined);\r\n    // Use a separate focus flag to control whether the detail display or the list display is used\r\n    // This avoids having an undefined name while the element with the details is sliding out\r\n    const [thrallFocused, setThrallFocused] = useState(false);\r\n    const [zoomCenter, setZoomCenter] = useState(undefined as unknown as ZoomCenter | undefined);\r\n\r\n    function handleSelectThrall(thrall: Thrall) {\r\n        let center = findCenter(thrall.locations);\r\n        if (center) {\r\n            setZoomCenter({zoom: -8, center});\r\n        }\r\n        setSelectedThrall(thrall)\r\n        setThrallFocused(true)\r\n    }\r\n\r\n    function handleDeselectThrall() {\r\n        // While animating, we still want the thrall details visible until\r\n        // it has slide out.\r\n        setThrallFocused(false)\r\n        setZoomCenter({zoom: -8.7});\r\n    }\r\n\r\n    function handleSelectLocation(location: ThrallLocation): void {\r\n        setZoomCenter({\r\n            center: ceCoordinateToLatLng(location),\r\n            zoom: -7,\r\n        });\r\n    }\r\n\r\n    return <div className=\"thrall-map-wrapper\">\r\n        <MapContainer center={[0, 0]}\r\n                      style={{height: '100vh', width: 'calc(100vw - var(--sidebar-width))'}}\r\n                      minZoom={-8.7}\r\n                      maxZoom={-4}\r\n                      zoomSnap={0.1}\r\n                      zoomDelta={0.1}\r\n                      crs={CRS.Simple}\r\n                      maxBounds={mapBounds}\r\n                      zoomControl={true}\r\n                      zoom={-8.7}>\r\n            <ImageOverlay url={process.env.PUBLIC_URL + \"/fc_assets/full_map_low_quality.jpg\"} bounds={mapBounds}/>\r\n            <MapEvents/>\r\n            <SetViewOnClick location={zoomCenter}/>\r\n            <MarkerForLocations thrall={selectedThrall} focused={thrallFocused}/>\r\n        </MapContainer>\r\n        <div className=\"sidebar-right\">\r\n            <ThrallList thralls={props.data}\r\n                        onSelectLocation={handleSelectLocation}\r\n                        selectedThrallFocused={thrallFocused}\r\n                        selectedThrall={selectedThrall}\r\n                        onDeselectThrall={handleDeselectThrall}\r\n                        onSelectThrall={handleSelectThrall}/>\r\n        </div>\r\n    </div>\r\n}\r\n","import React from 'react';\nimport './css/variables.css'\nimport './App.css';\nimport {ThrallMap} from \"./components/ThrallMap\";\nimport {Thrall} from \"./model/Thrall\";\n\ninterface AppState {\n    data: Thrall[]\n}\n\nexport class App extends React.Component<any, AppState> {\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            data: []\n        }\n    }\n\n    componentDidMount() {\n        fetch(window.location.href + '/data.json')\n            .then(value => value.json())\n            .then(data => this.setState({data}))\n    }\n\n    render() {\n        return (\n            <div>\n                <ThrallMap data={this.state.data}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'leaflet/dist/leaflet.css'\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}