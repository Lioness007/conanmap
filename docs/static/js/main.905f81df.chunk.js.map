{"version":3,"sources":["model/Thrall.ts","components/ThrallListItem.tsx","components/thrall-details/ThrallDetails.tsx","components/thrall-list/ThrallList.tsx","util/conversions.ts","components/ThrallMap.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ThrallType","ThrallListItem","props","className","onClick","onSelect","thrall","name","type","ThrallDetails","slideAnimationClass","focused","onDeSelect","locations","map","value","lat","lng","ThrallList","additionalListClass","selectedThrallFocused","Fragment","selectedThrall","onDeselectThrall","thralls","sort","a","b","localeCompare","onSelectThrall","id","ceCoordinateToLatLng","x","y","southWest","LatLng","northEast","mapBounds","LatLngBounds","MapEvents","useMapEvents","click","event","console","log","latlng","zoom","target","_zoom","drag","panInsideBounds","animate","locationfound","location","makeThrall","data","TASKMASTER","CARPENTER","ARMORER","GROOMER","ALCHEMIST","makeMarkerForLocations","Circle","radius","center","Popup","makeMarkerForLocation","ThrallMap","useState","undefined","setSelectedThrall","thrallFocused","setThrallFocused","MapContainer","style","height","width","minZoom","maxZoom","zoomSnap","zoomDelta","crs","CRS","Simple","maxBounds","zoomControl","ImageOverlay","url","process","bounds","App","overflowX","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.905f81df.chunk.js","sourcesContent":["import {LatLngLiteral} from \"leaflet\";\r\n\r\nexport interface Thrall {\r\n    id: string;\r\n    name: string;\r\n    type: ThrallType;\r\n    locations: LatLngLiteral[];\r\n}\r\n\r\nexport enum ThrallType {\r\n    ALCHEMIST = 'ALCHEMIST',\r\n    BLACKSMITH = 'BLACKSMITH',\r\n    ARMORER = 'ARMORER',\r\n    CARPENTER = 'CARPENTER',\r\n    TASKMASTER = 'TASKMASTER',\r\n    GROOMER = 'GROOMER',\r\n    SMELTER = 'SMELTER  ',\r\n}\r\n","import {Thrall} from \"../model/Thrall\";\r\nimport React from \"react\";\r\n\r\nexport interface ThrallListThrallProps {\r\n    thrall: Thrall;\r\n    onSelect(thrall: Thrall): void;\r\n}\r\n\r\nexport const ThrallListItem = (props: ThrallListThrallProps) => {\r\n    return <div className=\"thrall-wars-thrall\" onClick={() => props.onSelect(props.thrall)}>\r\n        <div className=\"thrall-name\">{props.thrall.name}</div>\r\n        <div className=\"thrall-type\">\r\n            {props.thrall.type}\r\n        </div>\r\n    </div>\r\n}\r\n","import {Thrall} from \"../../model/Thrall\";\r\nimport React from \"react\";\r\nimport './ThrallDetails.css';\r\n\r\ninterface ThrallDetailsProps {\r\n    focused: boolean;\r\n    thrall?: Thrall;\r\n    onDeSelect(): void;\r\n}\r\n\r\nexport const ThrallDetails = (props: ThrallDetailsProps) => {\r\n    const slideAnimationClass = props.focused ? 'thrall-details-sliding-in' : 'thrall-details-sliding-out'\r\n    return <div className={\"thrall-details-container \" + slideAnimationClass}>\r\n        <div className=\"thrall-wars-thrall-details\">\r\n            <div className=\"header\" onClick={props.onDeSelect}>\r\n                <div className=\"thrall-name\">{props.thrall?.name}</div>\r\n                <div className=\"thrall-type\">\r\n                    {props.thrall?.type}\r\n                </div>\r\n            </div>\r\n            <div className=\"thrall-location-list\">\r\n                {props.thrall?.locations.map(value => <div>{value.lat + \" \" + value.lng}</div>)}\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n","import {Thrall} from \"../../model/Thrall\";\r\nimport {ThrallListItem} from \"../ThrallListItem\";\r\nimport React from \"react\";\r\nimport {ThrallDetails} from \"../thrall-details/ThrallDetails\";\r\nimport './ThrallList.css';\r\n\r\nexport interface ThrallListProps {\r\n    selectedThrall?: Thrall;\r\n    // For animation\r\n    selectedThrallFocused: boolean;\r\n    thralls: Thrall[];\r\n    onSelectThrall(thrall: Thrall): void;\r\n    onDeselectThrall(): void;\r\n}\r\n\r\nexport const ThrallList = (props: ThrallListProps) => {\r\n    const additionalListClass = props.selectedThrallFocused ? 'thrall-list-sliding-out' : 'thrall-list-sliding-in';\r\n    return <React.Fragment>\r\n        <ThrallDetails focused={props.selectedThrallFocused} thrall={props.selectedThrall} onDeSelect={props.onDeselectThrall}/>\r\n        <div className={'thrall-list ' + additionalListClass}>\r\n            {props.thralls\r\n                .sort((a, b) => a.name.localeCompare(b.name))\r\n                .map(value => <ThrallListItem key={value.id}\r\n                                              onSelect={props.onSelectThrall}\r\n                                              thrall={value}/>)}\r\n        </div>\r\n    </React.Fragment>\r\n}\r\n","import {LatLngLiteral} from \"leaflet\";\r\n\r\n// Coords from // TeleportPlayer x y z\r\nexport function ceCoordinateToLatLng(x: number, y: number): LatLngLiteral {\r\n    return {\r\n        lat: -1 * y,\r\n        lng: x\r\n    }\r\n}\r\n","import {Circle, ImageOverlay, MapContainer, Popup, useMapEvents} from \"react-leaflet\";\r\nimport {CRS, LatLng, LatLngBounds, LatLngBoundsExpression, LatLngLiteral} from \"leaflet\";\r\nimport {ThrallList} from \"./thrall-list/ThrallList\";\r\nimport {Thrall, ThrallType} from \"../model/Thrall\";\r\nimport React, {useState} from \"react\";\r\nimport {ceCoordinateToLatLng} from \"../util/conversions\";\r\n\r\n// Coordiantes are [y,x]\r\n// Teleport player locates them as [x, y, z]\r\n\r\n// Left Side: TeleportPlayer -342934.09375 349993.78125 -17373.080078\r\n// Right side: TeleportPlayer 474806.09375 329969.6875 -37927.75\r\n// Bottom: TeleportPlayer 248194.171875 368872.59375 -10562.074219\r\n// Top: TeleportPlayer 17492.65625 -445384.28125 15668.111328\r\n\r\n// WEST SOUTH EAST NORTH\r\n// -342934 368872 474806 -445384\r\n// Latitude: bottom to top\r\n// Longitude: left to right\r\n// Left/West: -342934.00000\r\n// Right: 474806.00000\r\n// Top: -445384.00000\r\n// Bottom: 368872.00000\r\n// const southWest: LatLng = new LatLng(368872.00000, -342934.00000);\r\n\r\n// NOTE: Latitude needs the sign inverted.\r\n// southwest teleport: TeleportPlayer -342673.59375 369398.8125 -15273.344727\r\nconst southWest: LatLng = new LatLng(-369398.00000, -342934.00000);\r\n// TeleportPlayer 475140.4375 -444603.34375 27547.671875\r\nconst northEast: LatLng = new LatLng(444603.00000, 475140.00000);\r\nconst mapBounds: LatLngBoundsExpression = new LatLngBounds(\r\n    southWest,\r\n    northEast\r\n);\r\n\r\nfunction MapEvents() {\r\n    const map = useMapEvents({\r\n        click: (event) => {\r\n            console.log(event.latlng);\r\n        },\r\n        zoom: event => {\r\n\r\n            console.log(event.target._zoom);\r\n        },\r\n        drag: () => {\r\n            map.panInsideBounds(mapBounds, {animate: false});\r\n        },\r\n        locationfound: (location) => {\r\n            console.log('location found:', location)\r\n        },\r\n    })\r\n    return null\r\n}\r\n\r\nfunction makeThrall(name: string, type: ThrallType, locations: LatLngLiteral[] = []): Thrall {\r\n    return {\r\n        name,\r\n        id: name,\r\n        type,\r\n        locations\r\n    }\r\n}\r\n\r\nconst data: Thrall[] = [\r\n    makeThrall('Viek the Spire', ThrallType.TASKMASTER),\r\n    makeThrall('Hekla', ThrallType.CARPENTER),\r\n    makeThrall('Thorunn', ThrallType.ARMORER),\r\n    makeThrall('Lady Elizabeth Killigrew', ThrallType.TASKMASTER),\r\n    makeThrall('Julia the Chaste', ThrallType.TASKMASTER),\r\n    makeThrall('Queen Julia the Chaste', ThrallType.TASKMASTER),\r\n    makeThrall('Fass the Torturer', ThrallType.TASKMASTER),\r\n    makeThrall('Landora the Groomer', ThrallType.GROOMER),\r\n    // TeleportPlayer 131140.3125 202741.0 -19914.181641\r\n    makeThrall('Beast the Breaker', ThrallType.TASKMASTER, [ceCoordinateToLatLng(131140.3125, 202741.0)]),\r\n    makeThrall('Floki the Tinkerer', ThrallType.ARMORER, [ceCoordinateToLatLng(131140.3125, 202741.0)]),\r\n    makeThrall('Berglind', ThrallType.ARMORER),\r\n    makeThrall('Serpa the Gem Cutter', ThrallType.ALCHEMIST),\r\n    makeThrall('Katla', ThrallType.TASKMASTER),\r\n    makeThrall('Gabriela the Alchemist', ThrallType.TASKMASTER),\r\n    makeThrall('Ivar the Crafty One', ThrallType.TASKMASTER),\r\n    makeThrall('Akasuki the Binder', ThrallType.ARMORER),\r\n]\r\n\r\n\r\nfunction makeMarkerForLocation(thrall: Thrall, location: LatLngLiteral) {\r\n    return <Circle key={location.lat + '_' + location.lng}\r\n                   radius={1000}\r\n                   center={{lat: location.lat, lng: location.lng}}>\r\n        <Popup>\r\n            {thrall.name}\r\n        </Popup>\r\n    </Circle>\r\n}\r\n\r\nfunction makeMarkerForLocations(thrall?: Thrall) {\r\n    return thrall?.locations.map(location => makeMarkerForLocation(thrall, location));\r\n}\r\n\r\n\r\nexport function ThrallMap() {\r\n\r\n    const [thralls] = useState(data);\r\n    const [selectedThrall, setSelectedThrall] = useState(undefined as unknown as Thrall | undefined);\r\n    const [thrallFocused, setThrallFocused] = useState(false);\r\n\r\n    function handleSelectThrall(thrall: Thrall) {\r\n        setSelectedThrall(thrall)\r\n        setThrallFocused(true)\r\n    }\r\n\r\n    function handleDeselectThrall() {\r\n        // While animating, we still want the thrall details visible until\r\n        // it has slide out.\r\n        setThrallFocused(false)\r\n    }\r\n\r\n    return <div className=\"thrall-map-wrapper\">\r\n        <MapContainer center={[0, 0]}\r\n                      style={{height: '100vh', width: 'calc(100vw - var(--sidebar-width))'}}\r\n                      minZoom={-8.7}\r\n                      maxZoom={-4}\r\n                      zoomSnap={0.1}\r\n                      zoomDelta={0.1}\r\n                      crs={CRS.Simple}\r\n                      maxBounds={mapBounds}\r\n                      zoomControl={true}\r\n                      zoom={-8.7}>\r\n            <ImageOverlay url={process.env.PUBLIC_URL + \"/fc_assets/full_map_low_quality.jpg\"} bounds={mapBounds}/>\r\n            <MapEvents/>\r\n            {makeMarkerForLocations(selectedThrall)}\r\n        </MapContainer>\r\n        <div className=\"sidebar-right\">\r\n            <ThrallList thralls={thralls}\r\n                        selectedThrallFocused={thrallFocused}\r\n                        selectedThrall={selectedThrall}\r\n                        onDeselectThrall={handleDeselectThrall}\r\n                        onSelectThrall={handleSelectThrall}/>\r\n        </div>\r\n    </div>\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport {ThrallMap} from \"./components/ThrallMap\";\n\n\nfunction App() {\n  return (\n    <div style={{overflowX: 'hidden'}}>\n      <ThrallMap/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'leaflet/dist/leaflet.css'\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}